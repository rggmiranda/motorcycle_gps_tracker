// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Trigger {
  SHOCK //Alarm triggered by accelerometer
  NO_POWER //Alarm triggered by dissconnecting the device
  TAG //Alarm triggered by distance from the tag
}

model Tag {
  id            Int             @id @default(autoincrement())
  name          String
  serial        String
  batteryLevel  Int // 0-100%
  TagsOnDevices TagsOnDevices[]
}

model TagsOnDevices {
  device   Device @relation(fields: [deviceId], references: [id])
  deviceId Int
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    Int
  @@id([deviceId, tagId])
}

model Device {
  id             Int             @id @default(autoincrement())
  alarmArmed     Boolean
  name           String          @db.VarChar(255)
  createdAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  parameters     DeviceParams    @relation(fields: [deviceParamsId], references: [id])
  deviceParamsId Int
  alarms         Alarm[]
  TagsOnDevices  TagsOnDevices[]
}

model DeviceParams {
  id                    Int      @id @default(autoincrement())
  shutDownDistance      Int      @default(150) //Distance from tag at which the vehicle shuts down (meters)
  shutDownMaxSpeed      Int      @default(40) //Max speed at which the can vehicle shut down (km/h)
  batteryLevelAlarm     Float    @default(12) //Vehicle's battery voltage at which a warning will be triggered
  minBatteryLevelAlarm  Float    @default(11.5) //Vehicle's battery voltage at which a persistant warning will be triggered
  vibrationTriggerLevel Int      @default(50) //calibration for vibration trigger 0-100
  device                Device[]
}

model Alarm {
  id            Int         @id @default(autoincrement())
  active        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deactivatedAt DateTime?
  telemetry     Telemetry[]
  device        Device      @relation(fields: [deviceId], references: [id])
  deviceId      Int
  snapShot      String?
  trigger       Trigger
}

model Telemetry {
  id             Int      @id @default(autoincrement())
  latitude       Float
  longitude      Float
  heading        Float
  acceleration_x Float?
  acceleration_y Float?
  acceleration_z Float?
  detectedTag    String?  @db.VarChar(255)
  tagBattery     Int? //0-100%
  createdAt      DateTime @default(now())
  alarm          Alarm?   @relation(fields: [alarmId], references: [id])
  alarmId        Int?
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Device    Device[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
